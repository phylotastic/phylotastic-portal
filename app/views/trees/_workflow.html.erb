<% if @explanation.nil? %>
  <div id="workflow-wrapper" style="margin-top: 25px;">
    Workflow explanation is currently unavailable
  </div>
<% else %>
  <div id="workflow-wrapper" style="margin-top: 25px; visibility: hidden;">
    <div class="row">
      <div class="col-md-7" style="min-height: 1200px;">
        <div id="diagram-wrapper">
          <div id="diagram"></div>
        </div>
      </div>
    
      <div class="col-md-5" id="explanation" data-spy="affix" data-offset-top="0">
        <%= @explanation["paragraph"] %>
      </div>
    </div>
  
    <div id="navigator-form" class="hide">
      <%= render :partial => "workflows/workflow_navigator_form", :locals => { explanation: @explanation, tree: tree } %>
    </div>

  </div>

<script>
  explanation = JSON.parse("<%= @explanation.to_json %>".replace(/&quot;/g,'"'));
  draw_flowchart(explanation);
  add_navigator(explanation);

  var root_class = "operationClassification";

  // draw buttons for traversing ontology
  function add_navigator(explanation) {
    // pattern up
    add_pattern('pattern-up', $('#diagram svg defs'), 'https://cdn3.iconfinder.com/data/icons/faticons/32/arrow-up-01-128.png');

    // pattern down
    add_pattern('pattern-down', $('#diagram svg defs'), 'https://cdn3.iconfinder.com/data/icons/faticons/32/arrow-down-01-128.png');

    // pattern add
    add_pattern('pattern-add', $('#diagram svg defs'), 'https://cdn4.iconfinder.com/data/icons/wirecons-free-vector-icons/32/add-128.png');
  
    // pattern remove
    add_pattern('pattern-remove', $('#diagram svg defs'), 'https://cdn0.iconfinder.com/data/icons/typicons-2/24/minus-128.png');
  
    // create service navigator buttons
    var svgns = "http://www.w3.org/2000/svg";
    for (i = 0; i < explanation['steps'].length ; i++) {
    
      for (j = 1; j < 3; j++) {
        var rect = document.createElementNS(svgns, 'rect');
      
        coor = extract_coordinate( $("rect#op" + i) );
        var x = coor[0];
        var y = coor[1];
  
        rect.setAttributeNS(null, 'x', '100%');
        rect.setAttributeNS(null, 'y', parseInt(y) + Math.pow(-1, j) * 10 );
        rect.setAttributeNS(null, 'height', '30');
        rect.setAttributeNS(null, 'width', '30');

        if ( j == 1 ) {
          rect.setAttributeNS(null, 'fill', 'url(#pattern-up)');
          rect.setAttributeNS(null, 'class', 'service-navigator nav-up');
        } else {
          rect.setAttributeNS(null, 'fill', 'url(#pattern-down)');
          rect.setAttributeNS(null, 'class', 'service-navigator nav-down');
        }

        $('#diagram svg')[0].appendChild(rect);
      }
    }
  
    // create input, output navigator buttons
    for (i = 0; i < explanation["steps"].length; i++) {
      for (var key in explanation["steps"][i]) {
        num_outputs = explanation["steps"][i][key]["output"].length;
      }
      for (k = 0; k < parseInt(num_outputs); k++) {
        for (j = 1; j < 3; j++) {
          var rect = document.createElementNS(svgns, 'rect');

          coor = extract_coordinate( $("path#o" + i) );
          var x = coor[0];
          var y = coor[1];

          rect.setAttributeNS(null, 'x', "100%");
          rect.setAttributeNS(null, 'y', parseInt(y) + Math.pow(-1, j) * 10 + k*40 );
          rect.setAttributeNS(null, 'height', '30');
          rect.setAttributeNS(null, 'width', '30');

          if ( j == 1 ) {
            rect.setAttributeNS(null, 'fill', 'url(#pattern-up)');
            rect.setAttributeNS(null, 'class', 'o-navigator nav-up for-outp-' + i.toString() + '-' + k.toString());
          } else {
            rect.setAttributeNS(null, 'fill', 'url(#pattern-down)');
            rect.setAttributeNS(null, 'class', 'o-navigator nav-down for-outp-' + i.toString() + '-' + k.toString());
          }

          $('#diagram svg')[0].appendChild(rect);
        }
      }
  
      for (var key in explanation["steps"][i]) {
        num_inputs = explanation["steps"][i][key]["input"].length;
      }
      for (k = 0; k < parseInt(num_inputs); k++) {
        for (j = 1; j < 3; j++) {
          var rect = document.createElementNS(svgns, 'rect');

          coor = extract_coordinate( $("path#i" + i) );
          var x = coor[0];
          var y = coor[1];

          rect.setAttributeNS(null, 'x', "100%");
          rect.setAttributeNS(null, 'y', parseInt(y) + Math.pow(-1, j) * 10 + k*40 );
          rect.setAttributeNS(null, 'height', '30');
          rect.setAttributeNS(null, 'width', '30');

          if ( j == 1 ) {
            rect.setAttributeNS(null, 'fill', 'url(#pattern-up)');
            rect.setAttributeNS(null, 'class', 'i-navigator nav-up for-inp-' + i.toString() + '-' + k.toString());
          } else {
            rect.setAttributeNS(null, 'fill', 'url(#pattern-down)');
            rect.setAttributeNS(null, 'class', 'i-navigator nav-down for-inp-' + i.toString() + '-' + k.toString());
          }

          $('#diagram svg')[0].appendChild(rect);
        }
      }
    }
  
    // add, remove datatype buttons
    for (i = 0; i < explanation["steps"].length; i++) {
      for (var key in explanation["steps"][i]) {
        num_inputs = explanation["steps"][i][key]["input"].length;
      }
      for (k = 0; k < parseInt(num_inputs); k++) {
        for (j = 1; j < 3; j++) {
          var rect = document.createElementNS(svgns, 'rect');

          coor = extract_coordinate( $("path#i" + i) );
          var x = coor[0];
          var y = coor[1];

          rect.setAttributeNS(null, 'x', "0%");
          rect.setAttributeNS(null, 'y', parseInt(y) + Math.pow(-1, j) * 10 + k*40 );
          rect.setAttributeNS(null, 'height', '30');
          rect.setAttributeNS(null, 'width', '30');

          if ( j == 1 ) {
            rect.setAttributeNS(null, 'fill', 'url(#pattern-add)');
            rect.setAttributeNS(null, 'class', 'd-navigator nav-add for-inp-' + i.toString() + '-' + k.toString());
          } else {
            rect.setAttributeNS(null, 'fill', 'url(#pattern-remove)');
            rect.setAttributeNS(null, 'class', 'd-navigator nav-remove for-inp-' + i.toString() + '-' + k.toString());
          }

          $('#diagram svg')[0].appendChild(rect);
        }
      }
    
    
      for (var key in explanation["steps"][i]) {
        num_outputs = 1;
        // num_outputs = explanation["steps"][i][key]["output"].length;
      }
      for (k = 0; k < parseInt(num_outputs); k++) {
        for (j = 1; j < 3; j++) {
          var rect = document.createElementNS(svgns, 'rect');

          coor = extract_coordinate( $("path#o" + i) );
          var x = coor[0];
          var y = coor[1];

          rect.setAttributeNS(null, 'x', "0%");
          rect.setAttributeNS(null, 'y', parseInt(y) + Math.pow(-1, j) * 10 + k*40 );
          rect.setAttributeNS(null, 'height', '30');
          rect.setAttributeNS(null, 'width', '30');

          if ( j == 1 ) {
            rect.setAttributeNS(null, 'fill', 'url(#pattern-add)');
            rect.setAttributeNS(null, 'class', 'd-navigator nav-add for-outp-' + i.toString() + '-' + k.toString());
          } else {
            rect.setAttributeNS(null, 'fill', 'url(#pattern-remove)');
            rect.setAttributeNS(null, 'class', 'd-navigator nav-remove for-outp-' + i.toString() + '-' + k.toString());
          }

          $('#diagram svg')[0].appendChild(rect);
        }
      }
    }

    $('#diagram svg').find('.service-navigator').click(function() {
      var index = $('.service-navigator').index( this );
      serv = Math.floor(index / 2);

      if ( index % 2 == 0 ) {
        $('#step-' + serv + '-up').prop("checked", true);
        if ( $("#op" + serv + "t" + " tspan").text() == root_class ) {
          return false;
        }
      } else {
        $('#step-' + serv + '-down').prop("checked", true);
      }
      $("#traverser").submit();
    });

    $('#diagram svg').find('.o-navigator').click(function() {
      var klass = $(this).attr('class');
      var regex = /\d+/g;
      var matches = klass.match(regex);

      var index = $('.o-navigator').index( this );

      id_form_field = '#output-' + matches[0] + '-' + matches[1];
      if ( index % 2 == 0 ) {
        // if ( $("#op" + io + "t" + " tspan").text() == root_class ) {
        //   $(this).addClass("hide");
        //   return false;
        // }
        $(id_form_field + '-up').prop("checked", true);
      } else {
        $(id_form_field + '-down').prop("checked", true);
      }

      $("#traverser").submit();
    });

    $('#diagram svg').find('.i-navigator').click(function() {
      var klass = $(this).attr('class');
      var regex = /\d+/g;
      var matches = klass.match(regex);

      var index = $('.i-navigator').index( this );

      id_form_field = '#input-' + matches[0] + '-' + matches[1];
      if ( index % 2 == 0 ) {
        // if ( $("#op" + io + "t" + " tspan").text() == root_class ) {
        //   $(this).addClass("hide");
        //   return false;
        // }
        $(id_form_field + '-up').prop("checked", true);
      } else {
        $(id_form_field + '-down').prop("checked", true);
      }

      $("#traverser").submit();
    });
  
    $('#diagram svg').find('.d-navigator').click(function() {
      var klass = $(this).attr('class');
      var regex = /\d+/g;
      var matches = klass.match(regex);

      var index = $('.d-navigator').index( this );

      id_form_field = '#step-' + Math.floor( index/4 ).toString();
      switch(index % 4) {
      case 0:
        $(id_form_field + '-input-add').prop("checked", true);
        break;
      case 1:
        $(id_form_field + '-input-add').prop("checked", false);
        break;
      case 2:
        $(id_form_field + '-output-add').prop("checked", true);
        break;
      case 3:
        $(id_form_field + '-output-add').prop("checked", false);
        break;
      }
    
      $("#traverser").submit();
    });
  }

  $('#workflow').removeClass('active');
  $('#workflow-wrapper').css("visibility", "visible");
  $('#diagram svg').css("width", "100%");

  function extract_coordinate( obj ) {
    var transformMatrix = obj.attr("-webkit-transform") ||
      obj.attr("-moz-transform")    ||
      obj.attr("-ms-transform")     ||
      obj.attr("-o-transform")      ||
      obj.attr("transform");
    var matrix = transformMatrix.replace(/[^0-9\-.,]/g, '').split(',');
    var x = matrix[12] || matrix[4];//translate x
    var y = matrix[13] || matrix[5];//translate y

    return [x, y]
  }

  function add_pattern(pid, defs, image_url) {
    var svgns = "http://www.w3.org/2000/svg";
    var pattern = document.createElementNS(svgns, 'pattern');
    pattern.setAttributeNS(null, 'x', '1');
    pattern.setAttributeNS(null, 'y', '1');
    pattern.setAttributeNS(null, 'width', '1');
    pattern.setAttributeNS(null, 'height', '1');
    pattern.setAttributeNS(null, 'patternUnits', 'objectBoundingBox');
    pattern.setAttributeNS(null, 'id', pid);
    defs.append(pattern);

    var image = document.createElementNS(svgns, 'image');
    image.setAttributeNS('http://www.w3.org/1999/xlink','href', image_url);
    image.setAttribute('width', '30');
    image.setAttribute('height', '30');
    $(document).find('#' + pid).append(image);
  }

  function draw_flowchart(explanation) {
    op   = "";
    flow = "";
    inp  = "";
    outp = "";
  
     
    for (i = 0; i < explanation["steps"].length; i++) { 
      var keys = [];
      for(var k in explanation["steps"][i]) keys.push(k);

      op   = op + "op" + i.toString() + '=>operation: ' + keys[0] + "\n";
      inp  = inp + "i" + i.toString() + '=>inputoutput: ';
      outp = outp + "o" + i.toString() + '=>inputoutput: ';
    
      for (j = 0; j < explanation["steps"][i][keys[0]]["input"].length; j++) {
        if (j == explanation["steps"][i][keys[0]]["input"].length - 1) {
          inp = inp + explanation["steps"][i][keys[0]]["input"][j];          
        } else {          
          inp = inp + explanation["steps"][i][keys[0]]["input"][j] + ' \n AND \n';
        }
      }
      inp = inp + "\n";
    
      for (j = 0; j < explanation["steps"][i][keys[0]]["output"].length; j++) {
        if (j == explanation["steps"][i][keys[0]]["output"].length - 1)
          outp = outp + explanation["steps"][i][keys[0]]["output"][j];
        else
          outp = outp + explanation["steps"][i][keys[0]]["output"][j] + ' \n AND \n';
      }
      outp = outp + "\n";
    
      if (i == explanation["steps"].length-1)
        flow = flow + "i" + i.toString() + "->" + "op" + i.toString() + "->" + "o" + i.toString() + "\n";
      else
        flow = flow + "i" + i.toString() + "->" + "op" + i.toString() + "->" + "o" + i.toString() + "->";
    }
  
    var diagram = flowchart.parse(op + inp + outp + flow);

    diagram.drawSVG('diagram', {
                                  'x': 0,
                                  'y': 0,
                                  'line-width': 3,
                                  'line-length': 50,
                                  'text-margin': 10,
                                  'font-size': 14,
                                  'font-color': 'black',
                                  'line-color': 'black',
                                  'element-color': 'black',
                                  'fill': 'white',
                                  'yes-text': 'yes',
                                  'no-text': 'no',
                                  'arrow-end': 'block',
                                  'scale': 1,
                                  // style symbol types
                                  'symbols': {
                                    'start': {
                                      // 'font-color': 'red',
                                      // 'element-color': 'green',
                                      // 'fill': 'yellow'
                                    },
                                    'operation': {
                                      // 'font-color': 'blue',
                                      // 'element-color': 'blue',
                                      'fill': '#58c4a3'
                                    },
                                    'end':{
                                      // 'class': 'end-element'
                                    }
                                  }
                                });
  }
</script>

<% end %>
